# http://stackoverflow.com/questions/24458645/label-encoding-across-multiple-columns-in-scikit-learn
# nice extension to labelEncoder
# we can use this to convert letters into numbers ;)
# just need to create list of categorical columns

import pandas as pd
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline


train = pd.read_csv(os.path.join('.','C:\Users\Evgeny\Documents\KeggleSpringLeaf\inputs','train.csv'))

class MultiColumnLabelEncoder:
    def __init__(self,columns = None):
        self.columns = columns # array of column names to encode

    def fit(self,X,y=None):
        return self # not relevant here

    def transform(self,X):
        '''
        Transforms columns of X specified in self.columns using
        LabelEncoder(). If no columns specified, transforms all
        columns in X.
        '''
        output = X.copy()
        if self.columns is not None:
            for col in self.columns:
                output[col] = LabelEncoder().fit_transform(output[col])
        else:
            for colname,col in output.iteritems():
                output[colname] = LabelEncoder().fit_transform(col)
        return output

    def fit_transform(self,X,y=None):
        return self.fit(X,y).transform(X)

# we need to implement handler function to check for numerical values
# for now just the list of categorical fields
train_non_cat = MultiColumnLabelEncoder(columns = ['VAR_0001',
'VAR_0005',
'VAR_0008',
'VAR_0009',
'VAR_0010',
'VAR_0011',
'VAR_0012',
'VAR_0043',
'VAR_0044',
'VAR_0073',
'VAR_0075',
'VAR_0156',
'VAR_0157',
'VAR_0158',
'VAR_0159',
'VAR_0166',
'VAR_0167',
'VAR_0168',
'VAR_0169',
'VAR_0176',
'VAR_0177',
'VAR_0178',
'VAR_0179',
'VAR_0196',
'VAR_0200',
'VAR_0202',
'VAR_0204',
'VAR_0205',
'VAR_0214',
'VAR_0216',
'VAR_0217',
'VAR_0222',
'VAR_0226',
'VAR_0229',
'VAR_0230',
'VAR_0232',
'VAR_0236',
'VAR_0237',
'VAR_0239',
'VAR_0274',
'VAR_0283',
'VAR_0305',
'VAR_0325',
'VAR_0342',
'VAR_0352',
'VAR_0353',
'VAR_0354',
'VAR_0404',
'VAR_0466',
'VAR_0467',
'VAR_0493',
'VAR_1934']).fit_transform(train)        
